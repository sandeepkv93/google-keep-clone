version: '3'

vars:
  BACKEND_DIR: ./backend
  FRONTEND_DIR: ./frontend
  API_TESTS_DIR: ./api-tests
  
  # Database configuration
  DB_NAME: google_keep_clone
  DB_USER: postgres
  DB_PASS: postgres
  DB_HOST: localhost
  DB_PORT: 5432
  
  # Server configuration
  SERVER_PORT: 8080
  FRONTEND_PORT: 5173
  
  # Docker configuration
  POSTGRES_IMAGE: postgres:15-alpine
  REDIS_IMAGE: redis:7-alpine

env:
  DATABASE_URL: "postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode=disable"
  REDIS_URL: "redis://localhost:6379"
  JWT_SECRET: dev-secret-key-change-in-production
  ENVIRONMENT: development
  PORT: "{{.SERVER_PORT}}"

tasks:
  # =============================================================================
  # HELP AND INFORMATION
  # =============================================================================
  
  default:
    desc: Show available tasks
    cmds:
      - task --list-all
    silent: true

  help:
    desc: Show detailed help for all tasks
    cmds:
      - echo "Google Keep Clone - Task Runner"
      - echo "================================"
      - echo ""
      - echo "Quick Start:"
      - echo "  task setup     - Install all dependencies"
      - echo "  task dev       - Start development environment"
      - echo "  task build     - Build production artifacts"
      - echo "  task test      - Run all tests"
      - echo ""
      - echo "For detailed task list run: task --list-all"
    silent: true

  info:
    desc: Show project information and status
    cmds:
      - echo "Google Keep Clone Project Status"
      - echo "==============================="
      - echo ""
      - echo "Backend (Go):"
      - cd {{.BACKEND_DIR}} && go version 2>/dev/null || echo "  ❌ Go not installed"
      - test -f {{.BACKEND_DIR}}/go.mod && echo "  ✅ Go module initialized" || echo "  ❌ Go module not found"
      - echo ""
      - echo "Frontend (Node.js):"
      - cd {{.FRONTEND_DIR}} && node --version 2>/dev/null || echo "  ❌ Node.js not installed"
      - test -f {{.FRONTEND_DIR}}/package.json && echo "  ✅ Package.json found" || echo "  ❌ Package.json not found"
      - echo ""
      - echo "Database:"
      - docker ps --filter "name=postgres" --format "table {{.Names}}\t{{.Status}}" | grep -q postgres && echo "  ✅ PostgreSQL running" || echo "  ❌ PostgreSQL not running"
      - docker ps --filter "name=redis" --format "table {{.Names}}\t{{.Status}}" | grep -q redis && echo "  ✅ Redis running" || echo "  ❌ Redis not running"
    silent: true

  # =============================================================================
  # SETUP AND INSTALLATION
  # =============================================================================
  
  setup:
    desc: Install all dependencies and setup the project
    cmds:
      - task: setup-backend
      - task: setup-frontend
      - task: setup-env
      - echo "✅ Project setup complete!"
      - echo "💡 Run 'task dev' to start development"

  setup-backend:
    desc: Setup backend dependencies
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "📦 Installing Go dependencies..."
      - go mod tidy
      - go mod download
      - echo "✅ Backend dependencies installed"

  setup-frontend:
    desc: Setup frontend dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - echo "📦 Installing Node.js dependencies..."
      - npm install
      - echo "✅ Frontend dependencies installed"

  setup-env:
    desc: Setup environment configuration
    cmds:
      - |
        if [ ! -f .env ]; then
          echo "📝 Creating .env file from template..."
          echo "# Database" > .env
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/google_keep_clone?sslmode=disable" >> .env
          echo "" >> .env
          echo "# Redis" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "" >> .env
          echo "# JWT" >> .env
          echo "JWT_SECRET=dev-secret-key-change-in-production" >> .env
          echo "" >> .env
          echo "# Google OAuth (optional)" >> .env
          echo "GOOGLE_CLIENT_ID=" >> .env
          echo "GOOGLE_CLIENT_SECRET=" >> .env
          echo "" >> .env
          echo "# API URLs" >> .env
          echo "VITE_API_URL=http://localhost:8080" >> .env
          echo "VITE_WS_URL=ws://localhost:8080" >> .env
          echo "" >> .env
          echo "# Environment" >> .env
          echo "ENVIRONMENT=development" >> .env
          echo "PORT=8080" >> .env
          echo "✅ Environment file created"
        else
          echo "✅ Environment file already exists"
        fi
    status:
      - test -f .env

  # =============================================================================
  # DATABASE MANAGEMENT
  # =============================================================================
  
  db-start:
    desc: Start PostgreSQL and Redis with Docker
    cmds:
      - echo "🐳 Starting database services..."
      - |
        # Start PostgreSQL
        if ! docker ps --filter "name=postgres" --format "{{.Names}}" | grep -q postgres; then
          echo "📀 Starting PostgreSQL..."
          docker run -d \
            --name postgres \
            -e POSTGRES_DB={{.DB_NAME}} \
            -e POSTGRES_USER={{.DB_USER}} \
            -e POSTGRES_PASSWORD={{.DB_PASS}} \
            -p {{.DB_PORT}}:5432 \
            {{.POSTGRES_IMAGE}}
        else
          echo "✅ PostgreSQL already running"
        fi
        
        # Start Redis
        if ! docker ps --filter "name=redis" --format "{{.Names}}" | grep -q redis; then
          echo "🔴 Starting Redis..."
          docker run -d \
            --name redis \
            -p 6379:6379 \
            {{.REDIS_IMAGE}}
        else
          echo "✅ Redis already running"
        fi

  db-wait:
    desc: Wait for database to be ready
    cmds:
      - echo "⏳ Waiting for PostgreSQL to be ready..."
      - |
        for i in {1..30}; do
          if docker exec postgres pg_isready -U {{.DB_USER}} > /dev/null 2>&1; then
            echo "✅ PostgreSQL is ready"
            break
          fi
          echo "  Waiting... ($i/30)"
          sleep 2
        done

  db-stop:
    desc: Stop database services
    cmds:
      - echo "🛑 Stopping database services..."
      - docker stop postgres redis 2>/dev/null || true
      - echo "✅ Database services stopped"

  db-clean:
    desc: Remove database containers and volumes
    cmds:
      - echo "🧹 Cleaning database containers..."
      - docker stop postgres redis 2>/dev/null || true
      - docker rm postgres redis 2>/dev/null || true
      - docker volume prune -f
      - echo "✅ Database containers cleaned"

  db-reset:
    desc: Reset database (stop, clean, start)
    cmds:
      - task: db-stop
      - task: db-clean
      - task: db-start
      - task: db-wait
      - echo "♻️  Database reset complete"

  db-logs:
    desc: Show database logs
    cmds:
      - echo "📋 PostgreSQL logs:"
      - docker logs postgres --tail=50 -f

  # =============================================================================
  # DEVELOPMENT
  # =============================================================================
  
  dev:
    desc: Start full development environment (database + backend + frontend)
    deps: [db-start]
    cmds:
      - echo "🚀 Starting development environment..."
      - task: db-wait
      - echo "💡 Starting backend and frontend servers..."
      - echo "📊 Backend will be at: http://localhost:{{.SERVER_PORT}}"
      - echo "🌐 Frontend will be at: http://localhost:{{.FRONTEND_PORT}}"
      - echo "🏥 Health check: http://localhost:{{.SERVER_PORT}}/health"
      - echo ""
      - echo "⏹️  Stop with Ctrl+C or run: task dev-stop"
      - echo ""
      - echo "Starting servers in parallel..."

  dev-backend:
    desc: Start backend development server only
    dir: "{{.BACKEND_DIR}}"
    deps: [db-wait]
    cmds:
      - echo "🔥 Starting backend server on port {{.SERVER_PORT}}..."
      - |
        if command -v air > /dev/null; then
          air
        else
          echo "⚠️  Air not installed, using go run (no hot reload)"
          echo "💡 Install air with: go install github.com/cosmtrek/air@latest"
          go run cmd/server/main.go
        fi

  dev-frontend:
    desc: Start frontend development server only
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - echo "⚛️  Starting frontend server on port {{.FRONTEND_PORT}}..."
      - npm run dev

  dev-stop:
    desc: Stop all development servers
    cmds:
      - echo "🛑 Stopping development servers..."
      - pkill -f "air" || true
      - pkill -f "go run" || true
      - pkill -f "vite" || true
      - pkill -f "npm run dev" || true
      - echo "✅ Development servers stopped"

  # =============================================================================
  # BUILDING
  # =============================================================================
  
  build:
    desc: Build production artifacts for both frontend and backend
    cmds:
      - task: build-frontend
      - task: build-backend
      - echo "🎉 Build complete!"

  build-frontend:
    desc: Build frontend for production
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - echo "⚛️  Building frontend..."
      - npm run build
      - echo "✅ Frontend build complete"

  build-backend:
    desc: Build backend binary
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🔨 Building backend..."
      - mkdir -p bin
      - go build -o bin/server cmd/server/main.go
      - echo "✅ Backend build complete: {{.BACKEND_DIR}}/bin/server"

  # =============================================================================
  # TESTING
  # =============================================================================
  
  test:
    desc: Run all tests
    cmds:
      - task: test-backend
      - echo "🧪 All tests complete!"

  test-backend:
    desc: Run backend tests
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🧪 Running backend tests..."
      - go test ./... -v
      - echo "✅ Backend tests passed"

  test-api:
    desc: Test API endpoints (requires running server)
    cmds:
      - echo "🌐 Testing API endpoints..."
      - |
        echo "Testing health endpoint..."
        curl -f http://localhost:{{.SERVER_PORT}}/health || echo "❌ Server not running"
        echo ""
        echo "💡 Use REST client with files in {{.API_TESTS_DIR}}/ for comprehensive API testing"

  # =============================================================================
  # LINTING AND FORMATTING
  # =============================================================================
  
  lint:
    desc: Run linting for backend
    cmds:
      - task: lint-backend

  lint-backend:
    desc: Run Go linting
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🔍 Running Go linting..."
      - |
        if command -v golangci-lint > /dev/null; then
          golangci-lint run
        else
          echo "⚠️  golangci-lint not installed, running go vet instead"
          echo "💡 Install with: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
          go vet ./...
        fi
      - echo "✅ Backend linting complete"

  format:
    desc: Format code for backend
    cmds:
      - task: format-backend

  format-backend:
    desc: Format Go code
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🎨 Formatting Go code..."
      - go fmt ./...
      - echo "✅ Backend formatting complete"

  # =============================================================================
  # UTILITIES AND MAINTENANCE
  # =============================================================================
  
  clean:
    desc: Clean all build artifacts and dependencies
    cmds:
      - task: clean-backend
      - task: clean-frontend
      - echo "✅ Cleanup complete"

  clean-backend:
    desc: Clean backend build artifacts
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🧹 Cleaning backend..."
      - go clean
      - rm -rf bin/
      - echo "✅ Backend cleaned"

  clean-frontend:
    desc: Clean frontend build artifacts and dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - echo "🧹 Cleaning frontend..."
      - rm -rf dist/
      - rm -rf node_modules/
      - echo "✅ Frontend cleaned"

  deps-update:
    desc: Update all dependencies
    cmds:
      - task: deps-update-backend
      - task: deps-update-frontend

  deps-update-backend:
    desc: Update Go dependencies
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "⬆️  Updating Go dependencies..."
      - go get -u ./...
      - go mod tidy
      - echo "✅ Go dependencies updated"

  deps-update-frontend:
    desc: Update Node.js dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - echo "⬆️  Updating Node.js dependencies..."
      - npm update
      - echo "✅ Node.js dependencies updated"

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  tools-install:
    desc: Install useful development tools
    cmds:
      - echo "🔧 Installing development tools..."
      - |
        # Install Air for Go hot reloading
        if ! command -v air > /dev/null; then
          echo "Installing Air for Go hot reloading..."
          go install github.com/cosmtrek/air@latest
        fi
        
        # Install golangci-lint
        if ! command -v golangci-lint > /dev/null; then
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        fi
        
        # Install swag for API documentation
        if ! command -v swag > /dev/null; then
          echo "Installing swag for API docs..."
          go install github.com/swaggo/swag/cmd/swag@latest
        fi
      - echo "✅ Development tools installed"

  docs-generate:
    desc: Generate API documentation
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "📚 Generating API documentation..."
      - |
        if command -v swag > /dev/null; then
          swag init -g cmd/server/main.go -o docs/
          echo "✅ API docs generated in {{.BACKEND_DIR}}/docs/"
        else
          echo "⚠️  swag not installed. Run 'task tools-install' first"
        fi

  # =============================================================================
  # QUICK COMMANDS
  # =============================================================================
  
  start:
    desc: Quick start (alias for dev)
    cmds:
      - task: dev

  stop:
    desc: Stop all services
    cmds:
      - task: dev-stop
      - task: db-stop

  restart:
    desc: Restart development environment
    cmds:
      - task: stop
      - task: dev

  status:
    desc: Show status of all services
    cmds:
      - task: info